/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.techsocialist.servicebuilder.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.techsocialist.servicebuilder.model.ProductionHouseEntry;
import com.techsocialist.servicebuilder.model.ProductionHouseEntryBannerBlobModel;
import com.techsocialist.servicebuilder.model.ProductionHouseEntryLogoBlobModel;
import com.techsocialist.servicebuilder.model.ProductionHouseEntryModel;
import com.techsocialist.servicebuilder.service.ProductionHouseEntryLocalServiceUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductionHouseEntry service. Represents a row in the &quot;production_house_register&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductionHouseEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductionHouseEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductionHouseEntryImpl
 * @generated
 */
public class ProductionHouseEntryModelImpl
	extends BaseModelImpl<ProductionHouseEntry>
	implements ProductionHouseEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a production house entry model instance should use the <code>ProductionHouseEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "production_house_register";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"userId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"cin", Types.VARCHAR}, {"logo", Types.BLOB},
		{"banner", Types.BLOB}, {"landline", Types.VARCHAR},
		{"websiteUrl", Types.VARCHAR}, {"addressLine1", Types.VARCHAR},
		{"addressLine2", Types.VARCHAR}, {"addressLine3", Types.VARCHAR},
		{"place", Types.VARCHAR}, {"state_", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"pincode", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"contactPersonFirstName", Types.VARCHAR},
		{"contactPersonLastNameName", Types.VARCHAR},
		{"contactPersonMobile", Types.VARCHAR},
		{"contactPersonEmail", Types.VARCHAR}, {"userName", Types.VARCHAR},
		{"password_", Types.VARCHAR}, {"createdBy", Types.VARCHAR},
		{"modifiedBy", Types.VARCHAR}, {"createdDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("logo", Types.BLOB);
		TABLE_COLUMNS_MAP.put("banner", Types.BLOB);
		TABLE_COLUMNS_MAP.put("landline", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("websiteUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("place", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pincode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonLastNameName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonMobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table production_house_register (id_ LONG not null primary key,userId LONG,name VARCHAR(75) null,cin VARCHAR(75) null,logo BLOB,banner BLOB,landline VARCHAR(75) null,websiteUrl VARCHAR(75) null,addressLine1 VARCHAR(75) null,addressLine2 VARCHAR(75) null,addressLine3 VARCHAR(75) null,place VARCHAR(75) null,state_ VARCHAR(75) null,country VARCHAR(75) null,pincode VARCHAR(75) null,status VARCHAR(75) null,contactPersonFirstName VARCHAR(75) null,contactPersonLastNameName VARCHAR(75) null,contactPersonMobile VARCHAR(75) null,contactPersonEmail VARCHAR(75) null,userName VARCHAR(75) null,password_ VARCHAR(75) null,createdBy VARCHAR(75) null,modifiedBy VARCHAR(75) null,createdDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table production_house_register";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productionHouseEntry.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY production_house_register.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ProductionHouseEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductionHouseEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ProductionHouseEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductionHouseEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductionHouseEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductionHouseEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductionHouseEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductionHouseEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductionHouseEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductionHouseEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductionHouseEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductionHouseEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProductionHouseEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProductionHouseEntry.class.getClassLoader(),
			ProductionHouseEntry.class, ModelWrapper.class);

		try {
			Constructor<ProductionHouseEntry> constructor =
				(Constructor<ProductionHouseEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ProductionHouseEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductionHouseEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductionHouseEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ProductionHouseEntry, Object>>();
		Map<String, BiConsumer<ProductionHouseEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ProductionHouseEntry, ?>>();

		attributeGetterFunctions.put("id", ProductionHouseEntry::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<ProductionHouseEntry, Long>)
				ProductionHouseEntry::setId);
		attributeGetterFunctions.put("userId", ProductionHouseEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ProductionHouseEntry, Long>)
				ProductionHouseEntry::setUserId);
		attributeGetterFunctions.put("name", ProductionHouseEntry::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setName);
		attributeGetterFunctions.put("cin", ProductionHouseEntry::getCin);
		attributeSetterBiConsumers.put(
			"cin",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setCin);
		attributeGetterFunctions.put("logo", ProductionHouseEntry::getLogo);
		attributeSetterBiConsumers.put(
			"logo",
			(BiConsumer<ProductionHouseEntry, Blob>)
				ProductionHouseEntry::setLogo);
		attributeGetterFunctions.put("banner", ProductionHouseEntry::getBanner);
		attributeSetterBiConsumers.put(
			"banner",
			(BiConsumer<ProductionHouseEntry, Blob>)
				ProductionHouseEntry::setBanner);
		attributeGetterFunctions.put(
			"landline", ProductionHouseEntry::getLandline);
		attributeSetterBiConsumers.put(
			"landline",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setLandline);
		attributeGetterFunctions.put(
			"websiteUrl", ProductionHouseEntry::getWebsiteUrl);
		attributeSetterBiConsumers.put(
			"websiteUrl",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setWebsiteUrl);
		attributeGetterFunctions.put(
			"addressLine1", ProductionHouseEntry::getAddressLine1);
		attributeSetterBiConsumers.put(
			"addressLine1",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setAddressLine1);
		attributeGetterFunctions.put(
			"addressLine2", ProductionHouseEntry::getAddressLine2);
		attributeSetterBiConsumers.put(
			"addressLine2",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setAddressLine2);
		attributeGetterFunctions.put(
			"addressLine3", ProductionHouseEntry::getAddressLine3);
		attributeSetterBiConsumers.put(
			"addressLine3",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setAddressLine3);
		attributeGetterFunctions.put("place", ProductionHouseEntry::getPlace);
		attributeSetterBiConsumers.put(
			"place",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setPlace);
		attributeGetterFunctions.put("state", ProductionHouseEntry::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setState);
		attributeGetterFunctions.put(
			"country", ProductionHouseEntry::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setCountry);
		attributeGetterFunctions.put(
			"pincode", ProductionHouseEntry::getPincode);
		attributeSetterBiConsumers.put(
			"pincode",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setPincode);
		attributeGetterFunctions.put("status", ProductionHouseEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setStatus);
		attributeGetterFunctions.put(
			"contactPersonFirstName",
			ProductionHouseEntry::getContactPersonFirstName);
		attributeSetterBiConsumers.put(
			"contactPersonFirstName",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setContactPersonFirstName);
		attributeGetterFunctions.put(
			"contactPersonLastNameName",
			ProductionHouseEntry::getContactPersonLastNameName);
		attributeSetterBiConsumers.put(
			"contactPersonLastNameName",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setContactPersonLastNameName);
		attributeGetterFunctions.put(
			"contactPersonMobile",
			ProductionHouseEntry::getContactPersonMobile);
		attributeSetterBiConsumers.put(
			"contactPersonMobile",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setContactPersonMobile);
		attributeGetterFunctions.put(
			"contactPersonEmail", ProductionHouseEntry::getContactPersonEmail);
		attributeSetterBiConsumers.put(
			"contactPersonEmail",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setContactPersonEmail);
		attributeGetterFunctions.put(
			"userName", ProductionHouseEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setUserName);
		attributeGetterFunctions.put(
			"password", ProductionHouseEntry::getPassword);
		attributeSetterBiConsumers.put(
			"password",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setPassword);
		attributeGetterFunctions.put(
			"createdBy", ProductionHouseEntry::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", ProductionHouseEntry::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<ProductionHouseEntry, String>)
				ProductionHouseEntry::setModifiedBy);
		attributeGetterFunctions.put(
			"createdDate", ProductionHouseEntry::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<ProductionHouseEntry, Date>)
				ProductionHouseEntry::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", ProductionHouseEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ProductionHouseEntry, Date>)
				ProductionHouseEntry::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getCin() {
		if (_cin == null) {
			return "";
		}
		else {
			return _cin;
		}
	}

	@Override
	public void setCin(String cin) {
		_cin = cin;
	}

	@Override
	public Blob getLogo() {
		if (_logoBlobModel == null) {
			try {
				_logoBlobModel =
					ProductionHouseEntryLocalServiceUtil.getLogoBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_logoBlobModel != null) {
			blob = _logoBlobModel.getLogoBlob();
		}

		return blob;
	}

	@Override
	public void setLogo(Blob logo) {
		if (_logoBlobModel == null) {
			_logoBlobModel = new ProductionHouseEntryLogoBlobModel(
				getPrimaryKey(), logo);
		}
		else {
			_logoBlobModel.setLogoBlob(logo);
		}
	}

	@Override
	public Blob getBanner() {
		if (_bannerBlobModel == null) {
			try {
				_bannerBlobModel =
					ProductionHouseEntryLocalServiceUtil.getBannerBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_bannerBlobModel != null) {
			blob = _bannerBlobModel.getBannerBlob();
		}

		return blob;
	}

	@Override
	public void setBanner(Blob banner) {
		if (_bannerBlobModel == null) {
			_bannerBlobModel = new ProductionHouseEntryBannerBlobModel(
				getPrimaryKey(), banner);
		}
		else {
			_bannerBlobModel.setBannerBlob(banner);
		}
	}

	@Override
	public String getLandline() {
		if (_landline == null) {
			return "";
		}
		else {
			return _landline;
		}
	}

	@Override
	public void setLandline(String landline) {
		_landline = landline;
	}

	@Override
	public String getWebsiteUrl() {
		if (_websiteUrl == null) {
			return "";
		}
		else {
			return _websiteUrl;
		}
	}

	@Override
	public void setWebsiteUrl(String websiteUrl) {
		_websiteUrl = websiteUrl;
	}

	@Override
	public String getAddressLine1() {
		if (_addressLine1 == null) {
			return "";
		}
		else {
			return _addressLine1;
		}
	}

	@Override
	public void setAddressLine1(String addressLine1) {
		_addressLine1 = addressLine1;
	}

	@Override
	public String getAddressLine2() {
		if (_addressLine2 == null) {
			return "";
		}
		else {
			return _addressLine2;
		}
	}

	@Override
	public void setAddressLine2(String addressLine2) {
		_addressLine2 = addressLine2;
	}

	@Override
	public String getAddressLine3() {
		if (_addressLine3 == null) {
			return "";
		}
		else {
			return _addressLine3;
		}
	}

	@Override
	public void setAddressLine3(String addressLine3) {
		_addressLine3 = addressLine3;
	}

	@Override
	public String getPlace() {
		if (_place == null) {
			return "";
		}
		else {
			return _place;
		}
	}

	@Override
	public void setPlace(String place) {
		_place = place;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getPincode() {
		if (_pincode == null) {
			return "";
		}
		else {
			return _pincode;
		}
	}

	@Override
	public void setPincode(String pincode) {
		_pincode = pincode;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public String getContactPersonFirstName() {
		if (_contactPersonFirstName == null) {
			return "";
		}
		else {
			return _contactPersonFirstName;
		}
	}

	@Override
	public void setContactPersonFirstName(String contactPersonFirstName) {
		_contactPersonFirstName = contactPersonFirstName;
	}

	@Override
	public String getContactPersonLastNameName() {
		if (_contactPersonLastNameName == null) {
			return "";
		}
		else {
			return _contactPersonLastNameName;
		}
	}

	@Override
	public void setContactPersonLastNameName(String contactPersonLastNameName) {
		_contactPersonLastNameName = contactPersonLastNameName;
	}

	@Override
	public String getContactPersonMobile() {
		if (_contactPersonMobile == null) {
			return "";
		}
		else {
			return _contactPersonMobile;
		}
	}

	@Override
	public void setContactPersonMobile(String contactPersonMobile) {
		_contactPersonMobile = contactPersonMobile;
	}

	@Override
	public String getContactPersonEmail() {
		if (_contactPersonEmail == null) {
			return "";
		}
		else {
			return _contactPersonEmail;
		}
	}

	@Override
	public void setContactPersonEmail(String contactPersonEmail) {
		_contactPersonEmail = contactPersonEmail;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProductionHouseEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductionHouseEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductionHouseEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductionHouseEntryImpl productionHouseEntryImpl =
			new ProductionHouseEntryImpl();

		productionHouseEntryImpl.setId(getId());
		productionHouseEntryImpl.setUserId(getUserId());
		productionHouseEntryImpl.setName(getName());
		productionHouseEntryImpl.setCin(getCin());
		productionHouseEntryImpl.setLandline(getLandline());
		productionHouseEntryImpl.setWebsiteUrl(getWebsiteUrl());
		productionHouseEntryImpl.setAddressLine1(getAddressLine1());
		productionHouseEntryImpl.setAddressLine2(getAddressLine2());
		productionHouseEntryImpl.setAddressLine3(getAddressLine3());
		productionHouseEntryImpl.setPlace(getPlace());
		productionHouseEntryImpl.setState(getState());
		productionHouseEntryImpl.setCountry(getCountry());
		productionHouseEntryImpl.setPincode(getPincode());
		productionHouseEntryImpl.setStatus(getStatus());
		productionHouseEntryImpl.setContactPersonFirstName(
			getContactPersonFirstName());
		productionHouseEntryImpl.setContactPersonLastNameName(
			getContactPersonLastNameName());
		productionHouseEntryImpl.setContactPersonMobile(
			getContactPersonMobile());
		productionHouseEntryImpl.setContactPersonEmail(getContactPersonEmail());
		productionHouseEntryImpl.setUserName(getUserName());
		productionHouseEntryImpl.setPassword(getPassword());
		productionHouseEntryImpl.setCreatedBy(getCreatedBy());
		productionHouseEntryImpl.setModifiedBy(getModifiedBy());
		productionHouseEntryImpl.setCreatedDate(getCreatedDate());
		productionHouseEntryImpl.setModifiedDate(getModifiedDate());

		productionHouseEntryImpl.resetOriginalValues();

		return productionHouseEntryImpl;
	}

	@Override
	public int compareTo(ProductionHouseEntry productionHouseEntry) {
		long primaryKey = productionHouseEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProductionHouseEntry)) {
			return false;
		}

		ProductionHouseEntry productionHouseEntry = (ProductionHouseEntry)obj;

		long primaryKey = productionHouseEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ProductionHouseEntryModelImpl productionHouseEntryModelImpl = this;

		productionHouseEntryModelImpl._logoBlobModel = null;

		productionHouseEntryModelImpl._bannerBlobModel = null;
	}

	@Override
	public CacheModel<ProductionHouseEntry> toCacheModel() {
		ProductionHouseEntryCacheModel productionHouseEntryCacheModel =
			new ProductionHouseEntryCacheModel();

		productionHouseEntryCacheModel.id = getId();

		productionHouseEntryCacheModel.userId = getUserId();

		productionHouseEntryCacheModel.name = getName();

		String name = productionHouseEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			productionHouseEntryCacheModel.name = null;
		}

		productionHouseEntryCacheModel.cin = getCin();

		String cin = productionHouseEntryCacheModel.cin;

		if ((cin != null) && (cin.length() == 0)) {
			productionHouseEntryCacheModel.cin = null;
		}

		productionHouseEntryCacheModel.landline = getLandline();

		String landline = productionHouseEntryCacheModel.landline;

		if ((landline != null) && (landline.length() == 0)) {
			productionHouseEntryCacheModel.landline = null;
		}

		productionHouseEntryCacheModel.websiteUrl = getWebsiteUrl();

		String websiteUrl = productionHouseEntryCacheModel.websiteUrl;

		if ((websiteUrl != null) && (websiteUrl.length() == 0)) {
			productionHouseEntryCacheModel.websiteUrl = null;
		}

		productionHouseEntryCacheModel.addressLine1 = getAddressLine1();

		String addressLine1 = productionHouseEntryCacheModel.addressLine1;

		if ((addressLine1 != null) && (addressLine1.length() == 0)) {
			productionHouseEntryCacheModel.addressLine1 = null;
		}

		productionHouseEntryCacheModel.addressLine2 = getAddressLine2();

		String addressLine2 = productionHouseEntryCacheModel.addressLine2;

		if ((addressLine2 != null) && (addressLine2.length() == 0)) {
			productionHouseEntryCacheModel.addressLine2 = null;
		}

		productionHouseEntryCacheModel.addressLine3 = getAddressLine3();

		String addressLine3 = productionHouseEntryCacheModel.addressLine3;

		if ((addressLine3 != null) && (addressLine3.length() == 0)) {
			productionHouseEntryCacheModel.addressLine3 = null;
		}

		productionHouseEntryCacheModel.place = getPlace();

		String place = productionHouseEntryCacheModel.place;

		if ((place != null) && (place.length() == 0)) {
			productionHouseEntryCacheModel.place = null;
		}

		productionHouseEntryCacheModel.state = getState();

		String state = productionHouseEntryCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			productionHouseEntryCacheModel.state = null;
		}

		productionHouseEntryCacheModel.country = getCountry();

		String country = productionHouseEntryCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			productionHouseEntryCacheModel.country = null;
		}

		productionHouseEntryCacheModel.pincode = getPincode();

		String pincode = productionHouseEntryCacheModel.pincode;

		if ((pincode != null) && (pincode.length() == 0)) {
			productionHouseEntryCacheModel.pincode = null;
		}

		productionHouseEntryCacheModel.status = getStatus();

		String status = productionHouseEntryCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			productionHouseEntryCacheModel.status = null;
		}

		productionHouseEntryCacheModel.contactPersonFirstName =
			getContactPersonFirstName();

		String contactPersonFirstName =
			productionHouseEntryCacheModel.contactPersonFirstName;

		if ((contactPersonFirstName != null) &&
			(contactPersonFirstName.length() == 0)) {

			productionHouseEntryCacheModel.contactPersonFirstName = null;
		}

		productionHouseEntryCacheModel.contactPersonLastNameName =
			getContactPersonLastNameName();

		String contactPersonLastNameName =
			productionHouseEntryCacheModel.contactPersonLastNameName;

		if ((contactPersonLastNameName != null) &&
			(contactPersonLastNameName.length() == 0)) {

			productionHouseEntryCacheModel.contactPersonLastNameName = null;
		}

		productionHouseEntryCacheModel.contactPersonMobile =
			getContactPersonMobile();

		String contactPersonMobile =
			productionHouseEntryCacheModel.contactPersonMobile;

		if ((contactPersonMobile != null) &&
			(contactPersonMobile.length() == 0)) {

			productionHouseEntryCacheModel.contactPersonMobile = null;
		}

		productionHouseEntryCacheModel.contactPersonEmail =
			getContactPersonEmail();

		String contactPersonEmail =
			productionHouseEntryCacheModel.contactPersonEmail;

		if ((contactPersonEmail != null) &&
			(contactPersonEmail.length() == 0)) {

			productionHouseEntryCacheModel.contactPersonEmail = null;
		}

		productionHouseEntryCacheModel.userName = getUserName();

		String userName = productionHouseEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			productionHouseEntryCacheModel.userName = null;
		}

		productionHouseEntryCacheModel.password = getPassword();

		String password = productionHouseEntryCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			productionHouseEntryCacheModel.password = null;
		}

		productionHouseEntryCacheModel.createdBy = getCreatedBy();

		String createdBy = productionHouseEntryCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			productionHouseEntryCacheModel.createdBy = null;
		}

		productionHouseEntryCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = productionHouseEntryCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			productionHouseEntryCacheModel.modifiedBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			productionHouseEntryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			productionHouseEntryCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productionHouseEntryCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			productionHouseEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return productionHouseEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", cin=");
		sb.append(getCin());
		sb.append(", landline=");
		sb.append(getLandline());
		sb.append(", websiteUrl=");
		sb.append(getWebsiteUrl());
		sb.append(", addressLine1=");
		sb.append(getAddressLine1());
		sb.append(", addressLine2=");
		sb.append(getAddressLine2());
		sb.append(", addressLine3=");
		sb.append(getAddressLine3());
		sb.append(", place=");
		sb.append(getPlace());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", pincode=");
		sb.append(getPincode());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", contactPersonFirstName=");
		sb.append(getContactPersonFirstName());
		sb.append(", contactPersonLastNameName=");
		sb.append(getContactPersonLastNameName());
		sb.append(", contactPersonMobile=");
		sb.append(getContactPersonMobile());
		sb.append(", contactPersonEmail=");
		sb.append(getContactPersonEmail());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append(
			"com.techsocialist.servicebuilder.model.ProductionHouseEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cin</column-name><column-value><![CDATA[");
		sb.append(getCin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>landline</column-name><column-value><![CDATA[");
		sb.append(getLandline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>websiteUrl</column-name><column-value><![CDATA[");
		sb.append(getWebsiteUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressLine1</column-name><column-value><![CDATA[");
		sb.append(getAddressLine1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressLine2</column-name><column-value><![CDATA[");
		sb.append(getAddressLine2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressLine3</column-name><column-value><![CDATA[");
		sb.append(getAddressLine3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>place</column-name><column-value><![CDATA[");
		sb.append(getPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pincode</column-name><column-value><![CDATA[");
		sb.append(getPincode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPersonFirstName</column-name><column-value><![CDATA[");
		sb.append(getContactPersonFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPersonLastNameName</column-name><column-value><![CDATA[");
		sb.append(getContactPersonLastNameName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPersonMobile</column-name><column-value><![CDATA[");
		sb.append(getContactPersonMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPersonEmail</column-name><column-value><![CDATA[");
		sb.append(getContactPersonEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductionHouseEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id;
	private long _userId;
	private String _name;
	private String _cin;
	private ProductionHouseEntryLogoBlobModel _logoBlobModel;
	private ProductionHouseEntryBannerBlobModel _bannerBlobModel;
	private String _landline;
	private String _websiteUrl;
	private String _addressLine1;
	private String _addressLine2;
	private String _addressLine3;
	private String _place;
	private String _state;
	private String _country;
	private String _pincode;
	private String _status;
	private String _contactPersonFirstName;
	private String _contactPersonLastNameName;
	private String _contactPersonMobile;
	private String _contactPersonEmail;
	private String _userName;
	private String _password;
	private String _createdBy;
	private String _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private ProductionHouseEntry _escapedModel;

}