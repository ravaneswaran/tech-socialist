/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.techsocialist.servicebuilder.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.techsocialist.servicebuilder.model.Ticket;
import com.techsocialist.servicebuilder.model.TicketModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Ticket service. Represents a row in the &quot;ticket_register&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TicketModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TicketImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TicketImpl
 * @generated
 */
public class TicketModelImpl
	extends BaseModelImpl<Ticket> implements TicketModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ticket model instance should use the <code>Ticket</code> interface instead.
	 */
	public static final String TABLE_NAME = "ticket_register";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"userId", Types.BIGINT},
		{"videoId", Types.BIGINT}, {"ticketPriceId", Types.BIGINT},
		{"ticketTaxId", Types.BIGINT}, {"status", Types.VARCHAR},
		{"purchaseTime", Types.TIMESTAMP}, {"soldTime", Types.TIMESTAMP},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ticketPriceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ticketTaxId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purchaseTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("soldTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ticket_register (id_ LONG not null primary key,userId LONG,videoId LONG,ticketPriceId LONG,ticketTaxId LONG,status VARCHAR(75) null,purchaseTime DATE null,soldTime DATE null,createdDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table ticket_register";

	public static final String ORDER_BY_JPQL = " ORDER BY ticket.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ticket_register.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public TicketModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ticket.class;
	}

	@Override
	public String getModelClassName() {
		return Ticket.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Ticket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ticket, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Ticket)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Ticket, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Ticket, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Ticket)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Ticket, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Ticket, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Ticket>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Ticket.class.getClassLoader(), Ticket.class, ModelWrapper.class);

		try {
			Constructor<Ticket> constructor =
				(Constructor<Ticket>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Ticket, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Ticket, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Ticket, Object>>();
		Map<String, BiConsumer<Ticket, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Ticket, ?>>();

		attributeGetterFunctions.put("id", Ticket::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Ticket, Long>)Ticket::setId);
		attributeGetterFunctions.put("userId", Ticket::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Ticket, Long>)Ticket::setUserId);
		attributeGetterFunctions.put("videoId", Ticket::getVideoId);
		attributeSetterBiConsumers.put(
			"videoId", (BiConsumer<Ticket, Long>)Ticket::setVideoId);
		attributeGetterFunctions.put("ticketPriceId", Ticket::getTicketPriceId);
		attributeSetterBiConsumers.put(
			"ticketPriceId",
			(BiConsumer<Ticket, Long>)Ticket::setTicketPriceId);
		attributeGetterFunctions.put("ticketTaxId", Ticket::getTicketTaxId);
		attributeSetterBiConsumers.put(
			"ticketTaxId", (BiConsumer<Ticket, Long>)Ticket::setTicketTaxId);
		attributeGetterFunctions.put("status", Ticket::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Ticket, String>)Ticket::setStatus);
		attributeGetterFunctions.put("purchaseTime", Ticket::getPurchaseTime);
		attributeSetterBiConsumers.put(
			"purchaseTime", (BiConsumer<Ticket, Date>)Ticket::setPurchaseTime);
		attributeGetterFunctions.put("soldTime", Ticket::getSoldTime);
		attributeSetterBiConsumers.put(
			"soldTime", (BiConsumer<Ticket, Date>)Ticket::setSoldTime);
		attributeGetterFunctions.put("createdDate", Ticket::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate", (BiConsumer<Ticket, Date>)Ticket::setCreatedDate);
		attributeGetterFunctions.put("modifiedDate", Ticket::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Ticket, Date>)Ticket::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_videoId = videoId;
	}

	@Override
	public long getTicketPriceId() {
		return _ticketPriceId;
	}

	@Override
	public void setTicketPriceId(long ticketPriceId) {
		_ticketPriceId = ticketPriceId;
	}

	@Override
	public long getTicketTaxId() {
		return _ticketTaxId;
	}

	@Override
	public void setTicketTaxId(long ticketTaxId) {
		_ticketTaxId = ticketTaxId;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public Date getPurchaseTime() {
		return _purchaseTime;
	}

	@Override
	public void setPurchaseTime(Date purchaseTime) {
		_purchaseTime = purchaseTime;
	}

	@Override
	public Date getSoldTime() {
		return _soldTime;
	}

	@Override
	public void setSoldTime(Date soldTime) {
		_soldTime = soldTime;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Ticket.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Ticket toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Ticket>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TicketImpl ticketImpl = new TicketImpl();

		ticketImpl.setId(getId());
		ticketImpl.setUserId(getUserId());
		ticketImpl.setVideoId(getVideoId());
		ticketImpl.setTicketPriceId(getTicketPriceId());
		ticketImpl.setTicketTaxId(getTicketTaxId());
		ticketImpl.setStatus(getStatus());
		ticketImpl.setPurchaseTime(getPurchaseTime());
		ticketImpl.setSoldTime(getSoldTime());
		ticketImpl.setCreatedDate(getCreatedDate());
		ticketImpl.setModifiedDate(getModifiedDate());

		ticketImpl.resetOriginalValues();

		return ticketImpl;
	}

	@Override
	public int compareTo(Ticket ticket) {
		long primaryKey = ticket.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Ticket)) {
			return false;
		}

		Ticket ticket = (Ticket)obj;

		long primaryKey = ticket.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Ticket> toCacheModel() {
		TicketCacheModel ticketCacheModel = new TicketCacheModel();

		ticketCacheModel.id = getId();

		ticketCacheModel.userId = getUserId();

		ticketCacheModel.videoId = getVideoId();

		ticketCacheModel.ticketPriceId = getTicketPriceId();

		ticketCacheModel.ticketTaxId = getTicketTaxId();

		ticketCacheModel.status = getStatus();

		String status = ticketCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			ticketCacheModel.status = null;
		}

		Date purchaseTime = getPurchaseTime();

		if (purchaseTime != null) {
			ticketCacheModel.purchaseTime = purchaseTime.getTime();
		}
		else {
			ticketCacheModel.purchaseTime = Long.MIN_VALUE;
		}

		Date soldTime = getSoldTime();

		if (soldTime != null) {
			ticketCacheModel.soldTime = soldTime.getTime();
		}
		else {
			ticketCacheModel.soldTime = Long.MIN_VALUE;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			ticketCacheModel.createdDate = createdDate.getTime();
		}
		else {
			ticketCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ticketCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ticketCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return ticketCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Ticket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ticket, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Ticket)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Ticket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ticket, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Ticket)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Ticket>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id;
	private long _userId;
	private long _videoId;
	private long _ticketPriceId;
	private long _ticketTaxId;
	private String _status;
	private Date _purchaseTime;
	private Date _soldTime;
	private Date _createdDate;
	private Date _modifiedDate;
	private Ticket _escapedModel;

}