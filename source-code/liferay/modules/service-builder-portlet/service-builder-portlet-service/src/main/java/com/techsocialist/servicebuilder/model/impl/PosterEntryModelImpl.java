/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.techsocialist.servicebuilder.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.techsocialist.servicebuilder.model.PosterEntry;
import com.techsocialist.servicebuilder.model.PosterEntryContentBlobModel;
import com.techsocialist.servicebuilder.model.PosterEntryModel;
import com.techsocialist.servicebuilder.service.PosterEntryLocalServiceUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PosterEntry service. Represents a row in the &quot;poster_register&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PosterEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PosterEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PosterEntryImpl
 * @generated
 */
public class PosterEntryModelImpl
	extends BaseModelImpl<PosterEntry> implements PosterEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a poster entry model instance should use the <code>PosterEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "poster_register";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"videoEntryId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"content", Types.BLOB},
		{"type_", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"publishDateTime", Types.BIGINT}, {"createdBy", Types.VARCHAR},
		{"modifiedBy", Types.VARCHAR}, {"modifiedDate", Types.TIMESTAMP},
		{"createdDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.BLOB);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publishDateTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table poster_register (id_ LONG not null primary key,videoEntryId LONG,name VARCHAR(75) null,content BLOB,type_ VARCHAR(75) null,status VARCHAR(75) null,publishDateTime LONG,createdBy VARCHAR(75) null,modifiedBy VARCHAR(75) null,modifiedDate DATE null,createdDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table poster_register";

	public static final String ORDER_BY_JPQL = " ORDER BY posterEntry.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY poster_register.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public PosterEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PosterEntry.class;
	}

	@Override
	public String getModelClassName() {
		return PosterEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PosterEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PosterEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PosterEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PosterEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PosterEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PosterEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PosterEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PosterEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PosterEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PosterEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PosterEntry.class.getClassLoader(), PosterEntry.class,
			ModelWrapper.class);

		try {
			Constructor<PosterEntry> constructor =
				(Constructor<PosterEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PosterEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PosterEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PosterEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PosterEntry, Object>>();
		Map<String, BiConsumer<PosterEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PosterEntry, ?>>();

		attributeGetterFunctions.put("id", PosterEntry::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<PosterEntry, Long>)PosterEntry::setId);
		attributeGetterFunctions.put(
			"videoEntryId", PosterEntry::getVideoEntryId);
		attributeSetterBiConsumers.put(
			"videoEntryId",
			(BiConsumer<PosterEntry, Long>)PosterEntry::setVideoEntryId);
		attributeGetterFunctions.put("name", PosterEntry::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<PosterEntry, String>)PosterEntry::setName);
		attributeGetterFunctions.put("content", PosterEntry::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<PosterEntry, Blob>)PosterEntry::setContent);
		attributeGetterFunctions.put("type", PosterEntry::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<PosterEntry, String>)PosterEntry::setType);
		attributeGetterFunctions.put("status", PosterEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<PosterEntry, String>)PosterEntry::setStatus);
		attributeGetterFunctions.put(
			"publishDateTime", PosterEntry::getPublishDateTime);
		attributeSetterBiConsumers.put(
			"publishDateTime",
			(BiConsumer<PosterEntry, Long>)PosterEntry::setPublishDateTime);
		attributeGetterFunctions.put("createdBy", PosterEntry::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<PosterEntry, String>)PosterEntry::setCreatedBy);
		attributeGetterFunctions.put("modifiedBy", PosterEntry::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<PosterEntry, String>)PosterEntry::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedDate", PosterEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PosterEntry, Date>)PosterEntry::setModifiedDate);
		attributeGetterFunctions.put(
			"createdDate", PosterEntry::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<PosterEntry, Date>)PosterEntry::setCreatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getVideoEntryId() {
		return _videoEntryId;
	}

	@Override
	public void setVideoEntryId(long videoEntryId) {
		_videoEntryId = videoEntryId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public Blob getContent() {
		if (_contentBlobModel == null) {
			try {
				_contentBlobModel =
					PosterEntryLocalServiceUtil.getContentBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_contentBlobModel != null) {
			blob = _contentBlobModel.getContentBlob();
		}

		return blob;
	}

	@Override
	public void setContent(Blob content) {
		if (_contentBlobModel == null) {
			_contentBlobModel = new PosterEntryContentBlobModel(
				getPrimaryKey(), content);
		}
		else {
			_contentBlobModel.setContentBlob(content);
		}
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public long getPublishDateTime() {
		return _publishDateTime;
	}

	@Override
	public void setPublishDateTime(long publishDateTime) {
		_publishDateTime = publishDateTime;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PosterEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PosterEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PosterEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PosterEntryImpl posterEntryImpl = new PosterEntryImpl();

		posterEntryImpl.setId(getId());
		posterEntryImpl.setVideoEntryId(getVideoEntryId());
		posterEntryImpl.setName(getName());
		posterEntryImpl.setType(getType());
		posterEntryImpl.setStatus(getStatus());
		posterEntryImpl.setPublishDateTime(getPublishDateTime());
		posterEntryImpl.setCreatedBy(getCreatedBy());
		posterEntryImpl.setModifiedBy(getModifiedBy());
		posterEntryImpl.setModifiedDate(getModifiedDate());
		posterEntryImpl.setCreatedDate(getCreatedDate());

		posterEntryImpl.resetOriginalValues();

		return posterEntryImpl;
	}

	@Override
	public int compareTo(PosterEntry posterEntry) {
		long primaryKey = posterEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PosterEntry)) {
			return false;
		}

		PosterEntry posterEntry = (PosterEntry)obj;

		long primaryKey = posterEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PosterEntryModelImpl posterEntryModelImpl = this;

		posterEntryModelImpl._contentBlobModel = null;
	}

	@Override
	public CacheModel<PosterEntry> toCacheModel() {
		PosterEntryCacheModel posterEntryCacheModel =
			new PosterEntryCacheModel();

		posterEntryCacheModel.id = getId();

		posterEntryCacheModel.videoEntryId = getVideoEntryId();

		posterEntryCacheModel.name = getName();

		String name = posterEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			posterEntryCacheModel.name = null;
		}

		posterEntryCacheModel.type = getType();

		String type = posterEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			posterEntryCacheModel.type = null;
		}

		posterEntryCacheModel.status = getStatus();

		String status = posterEntryCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			posterEntryCacheModel.status = null;
		}

		posterEntryCacheModel.publishDateTime = getPublishDateTime();

		posterEntryCacheModel.createdBy = getCreatedBy();

		String createdBy = posterEntryCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			posterEntryCacheModel.createdBy = null;
		}

		posterEntryCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = posterEntryCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			posterEntryCacheModel.modifiedBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			posterEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			posterEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			posterEntryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			posterEntryCacheModel.createdDate = Long.MIN_VALUE;
		}

		return posterEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", videoEntryId=");
		sb.append(getVideoEntryId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", publishDateTime=");
		sb.append(getPublishDateTime());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.techsocialist.servicebuilder.model.PosterEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoEntryId</column-name><column-value><![CDATA[");
		sb.append(getVideoEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDateTime</column-name><column-value><![CDATA[");
		sb.append(getPublishDateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PosterEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id;
	private long _videoEntryId;
	private String _name;
	private PosterEntryContentBlobModel _contentBlobModel;
	private String _type;
	private String _status;
	private long _publishDateTime;
	private String _createdBy;
	private String _modifiedBy;
	private Date _modifiedDate;
	private Date _createdDate;
	private PosterEntry _escapedModel;

}